namespace = accou_marriage

scripted_trigger accou_marriage_0001_valid_liege_trigger = {
	is_available = yes
}

scripted_trigger accou_marriage_0001_valid_courtier_trigger = {
	# Valid marriage character
	accou_is_valid_marriage_character_trigger = yes

	# Not of major interest to root
	NOT = { accou_is_of_major_interest_trigger = { CHARACTER = root } }

	# Not a female in a male-dominated faith and vice versa
	NOT = { is_wrong_gender_in_faith_trigger = { FAITH = faith } }
}

scripted_trigger accou_marriage_0001_valid_marriage_candidate_trigger = {
	in_diplomatic_range = root
	is_ruler = no

	# Valid marriage character
	accou_is_valid_marriage_character_trigger = yes

	save_temporary_scope_as = candidate1

	# Determine matchmaker
	trigger_if = {
		limit = { exists = matchmaker }
		matchmaker = { save_temporary_scope_as = matchmaker1 }
	}
	trigger_else = {
		save_temporary_scope_as = matchmaker1
	}

	trigger_if = {
		limit = {
			NOT = { this = scope:matchmaker1 }
		}

		scope:matchmaker1 = {
			in_diplomatic_range = root

			# Valid marriage recipient
			accou_is_valid_marriage_recipient_trigger = { ACTOR = root }

			# Marriage does not yield alliance between matchmaker and root
			NOT = {
				yields_alliance = {
					candidate = scope:candidate1
					target = root
					target_candidate = $CHARACTER$
				}
			}
		}

		# Not of major interest to matchmaker
		NOT = {
			accou_is_of_major_interest_trigger = { CHARACTER = scope:matchmaker1 }
		}
	}

	# Valid marriage target
	accou_is_valid_marriage_target_trigger = {
		CHARACTER = $CHARACTER$
		ACTOR = root
		RECIPIENT = scope:matchmaker1
	}

	# Either the initiated character is attracted to the spouse candidate
	# or both characters are visibly fertile
	OR = {
		$CHARACTER$ = {
			is_attracted_to_gender_of = scope:candidate1
		}
		AND = {
			is_visibly_fertile = yes
			$CHARACTER$ = {
				is_visibly_fertile = yes
			}
		}
	}
}

accou_marriage.0001 = {
	type = character_event
	title = accou_marriage.0001.t
	desc = accou_marriage.0001.desc
	#hidden = yes

	theme = family
	left_portrait = {
		character = scope:courtier
	}
	right_portrait = {
		character = scope:candidate
	}
	override_background = {
		reference = throne_room
	}

	trigger = {
		accou_marriage_0001_valid_liege_trigger = yes
	}

	immediate = {
		# Determine courtier
		random_courtier = {
			limit = {
				accou_marriage_0001_valid_courtier_trigger = yes
			}
			save_scope_as = courtier
		}

		# Get nearby characters
		scope:courtier ?= {
			if = {
				limit = { allowed_to_marry_same_sex_trigger = yes }
				accou_get_nearby_characters_effect = {
					PREDICATE = always
					CHARACTERS = characters
				}
			}
			else = {
				accou_get_nearby_characters_effect = {
					PREDICATE = accou_is_opposite_sex_trigger
					CHARACTERS = characters
				}
			}
		}

		# Get shortlisted marriage candidates
		scope:courtier ?= { save_temporary_scope_as = suitor }
		every_in_list = {
			list = characters
			scope:suitor = {
				save_temporary_opinion_value_as = {
					name = suitor_opinion
					target = prev
				}
			}
			save_temporary_scope_value_as = {
				name = marriage_candidate_quality
				value = accou_marriage_candidate_quality_value
			}
			if = {
				limit = { scope:marriage_candidate_quality > 0 }
				set_variable = {
					name = accou_marriage_candidate_quality_value
					value = scope:marriage_candidate_quality
					days = 1
				}
				add_to_temporary_list = shortlisted_candidates
			}
		}

		# Save actor and secondary actor scopes
		root = { save_temporary_scope_as = actor }
		scope:courtier ?= { save_temporary_scope_as = secondary_actor }

		# Save option scopes used by marriage_ai_accept_modifier
		save_temporary_scope_value_as = { name = hook value = no }
		save_temporary_scope_value_as = { name = grand_wedding_promise value = no }
		scope:courtier ?= {
			if = {
				limit = { is_female = yes }
				save_temporary_scope_value_as = { name = matrilineal value = yes }
			}
			else = {
				save_temporary_scope_value_as = { name = matrilineal value = no }
			}
		}

		# Get accepting marriage canidates
		every_in_list = {
			list = shortlisted_candidates
			limit = {
				accou_marriage_0001_valid_marriage_candidate_trigger = { CHARACTER = scope:courtier }
			}

			# Save secondary recipient and recipient scopes
			save_temporary_scope_as = secondary_recipient
			if = {
				limit = { exists = matchmaker }
				matchmaker = { save_temporary_scope_as = recipient }
			}
			else = {
				save_temporary_scope_as = recipient
			}

			# Determine if the candidate is accepting or not
			if = {
				limit = { scope:actor = scope:recipient }
				add_to_temporary_list = accepting_candidates
			}
			else = {
				if = {
					limit = { always = no } # TODO Game rule

					# Use vanilla marriage_ai_accept_modifier to check if the marriage will be accepted
					random = {
						chance = 0
						marriage_ai_accept_modifier = yes
						modifier = {
							factor = 100
						}
						add_to_temporary_list = accepting_candidates
					}
				}
				else = {
					# Save additional scopes used by accou_quick_marriage_ai_accept_modifier_value
					scope:recipient = {
						save_temporary_opinion_value_as = { name = opinion_of_actor target = scope:actor }
						save_temporary_opinion_value_as = { name = opinion_of_secondary_actor target = scope:secondary_actor }
						save_temporary_opinion_value_as = { name = opinion_of_secondary_recipient target = scope:secondary_recipient }
						accou_get_ruler_with_royal_court_effect = yes
					}

					# Use accou_quick_marriage_ai_accept_modifier_value to check if the marriage will be accepted
					# This is not always accurate but faster (current match rate > 99.99%)
					# It may also be less compatible with some conversion mods
					save_temporary_scope_value_as = {
						name = quick_marriage_ai_accept_modifier
						value = accou_quick_marriage_ai_accept_modifier_value
					}
					if = {
						limit = { scope:quick_marriage_ai_accept_modifier > 0 }
						add_to_temporary_list = accepting_candidates
					}

					#accou_debug_log_quick_marriage_ai_accept_modifier_mismatches_effect = yes
				}
			}
		}

		# Determine best candidate
		ordered_in_list = {
			list = accepting_candidates
			limit = { has_variable = accou_marriage_candidate_quality_value }
			order_by = var:accou_marriage_candidate_quality_value
			save_scope_as = candidate
		}

		# Determine matchmaker
		scope:candidate ?= {
			if = {
				limit = { exists = matchmaker }
				matchmaker = { save_scope_as = matchmaker }
			}
			else = {
				save_scope_as = matchmaker
			}
		}

		# Save additional scopes for debugging
		scope:candidate ?= {
			scope:courtier ?= {
				save_opinion_value_as = {
					name = courtier_opinion_of_candidate
					target = prev
				}
			}
			save_scope_value_as = {
				name = candidate_quality
				value = var:accou_marriage_candidate_quality_value
			}
		}
	}

	option = {
		name = accou_marriage.0001.a

		if = {
			limit = {
				exists = scope:courtier
				exists = scope:candidate
				exists = scope:matchmaker

				is_character_interaction_potentially_accepted = {
					interaction = arrange_marriage_interaction
					recipient = scope:matchmaker
					secondary_actor = scope:courtier
					secondary_recipient = scope:candidate
				}
			}

			trigger_event = accou_marriage.0002
		}
		else = {
			accou_debug_log_3_effect = {
				MSG = accou_debug_msg_marriage_0001_a
				NAME1 = courtier TYPE1 = flag:character
				NAME2 = candidate TYPE2 = flag:character
				NAME3 = matchmaker TYPE3 = flag:character
			}
		}

		ai_chance = {
			base = 100
		}
	}
}

accou_marriage.0002 = {
	type = character_event
	title = accou_marriage.0002.t
	desc = accou_marriage.0002.desc

	theme = family
	left_portrait = {
		character = scope:courtier
	}
	right_portrait = {
		character = scope:candidate
	}
	override_background = {
		reference = throne_room
	}

	immediate = {
		# Evaluate candidate
		scope:candidate = {
			if = {
				limit = { NOT = { scope:matchmaker = root } }
				accou_get_better_councillor_options_effect = { LIEGE = root OPTIONS = accou_better_councillor_options }
				accou_get_better_court_position_options_effect = { LIEGE = root OPTIONS = accou_better_court_position_options }
			}

			every_in_list = {
				variable = accou_better_councillor_options
				add_to_list = better_councillor_options
			}
			every_in_list = {
				variable = accou_better_court_position_options
				add_to_list = better_court_position_options
			}
		}
	}

	after = {
		scope:candidate = {
			clear_variable_list = accou_better_councillor_options
			clear_variable_list = accou_better_court_position_options
		}
	}

	option = {
		name = accou_marriage.0002.a

		accou_debug_log_4_effect = {
			MSG = accou_debug_msg_marriage_0002_a
			NAME1 = courtier TYPE1 = flag:character
			NAME2 = candidate TYPE2 = flag:character
			NAME3 = matchmaker TYPE3 = flag:character
			NAME4 = candidate_quality TYPE4 = flag:value
		}
		debug_log_scopes = yes

		if = {
			limit = {
				scope:matchmaker = { is_ai = no }
			}
			run_interaction = {
				interaction = arrange_marriage_interaction
				actor = root
				recipient = scope:matchmaker
				secondary_actor = scope:courtier
				secondary_recipient = scope:candidate
				send_threshold = accept
			}
		}
		else = {
			trigger_event = accou_marriage.0003
		}

		ai_chance = {
			base = 1

			modifier = {
				list_size = {
					name = better_councillor_options
					value > 0
				}
				add = 50
			}
			modifier = {
				list_size = {
					name = better_court_position_options
					value > 0
				}
				add = 50
			}
		}
	}

	option = {
		name = accou_marriage.0002.b

		accou_debug_log_4_effect = {
			MSG = accou_debug_msg_marriage_0002_b
			NAME1 = courtier TYPE1 = flag:character
			NAME2 = candidate TYPE2 = flag:character
			NAME3 = matchmaker TYPE3 = flag:character
			NAME4 = candidate_quality TYPE4 = flag:value
		}
		debug_log_scopes = yes

		ai_chance = {
			base = 1
		}
	}

	option = {
		name = accou_marriage.0002.c

		trigger = {
			is_ai = no
		}

		accou_debug_log_4_effect = {
			MSG = accou_debug_msg_marriage_0002_c
			NAME1 = courtier TYPE1 = flag:character
			NAME2 = candidate TYPE2 = flag:character
			NAME3 = matchmaker TYPE3 = flag:character
			NAME4 = candidate_quality TYPE4 = flag:value
		}
		debug_log_scopes = yes

		open_interaction_window = {
			interaction = arrange_marriage_interaction
			actor = root
			recipient = scope:matchmaker
			secondary_actor = scope:courtier
			secondary_recipient = scope:candidate
		}
	}
}

accou_marriage.0003 = {
	type = character_event
	hidden = yes

	immediate = {
		# Actually marry courtier to candidate
		scope:courtier = {
			if = {
				limit = { is_female = no }
				marry = scope:candidate
			}
			else = {
				marry_matrilineal = scope:candidate
			}
		}

		# Save scopes used by marriage_interaction_on_accept_effect
		root = { save_scope_as = actor }
		scope:matchmaker = { save_scope_as = recipient }
		scope:courtier = { save_scope_as = secondary_actor }
		scope:candidate = { save_scope_as = secondary_recipient }
		save_scope_value_as = { name = hook value = no }
		save_scope_value_as = { name = grand_wedding_promise value = no }

		# Execute marriage interaction effect
		marriage_interaction_on_accept_effect = yes
	}
}